openapi: '3.0.2'
info:
  title: fixcycle
  version: '1.0'
servers:
  - url: 'localhost:5000'

components:
  schemas:
    CommonResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - 'status'
        - 'message'

    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - 'email'
        - 'password'
      example:
        email: 'rikudou@gmail.com'
        password: 'Rikudou123'

    UserRegister:
      allOf:
        - $ref: '#/components/schemas/UserLogin'
        - type: object
          properties:
            name:
              type: string
            phoneNumber:
              type: string
            address:
              type: string
          required:
            - 'name'
            - 'phoneNumber'
            - 'address'
          example:
            name: 'Rikudou Sennin'
            phoneNumber: '08123456789'
            address: 'Konoha, Leaf Village'

    Motorcycle:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        lisencePlate:
          type: string
        name:
          type: string
        brand:
          type: string
        type:
          type: string
        cylinderCapacity:
          type: number
        productionYear:
          type: string
        color:
          type: string
      required:
        - 'id'
        - 'userId'
        - 'lisencePlate'
        - 'name'
        - 'brand'
        - 'type'
        - 'cylinderCapacity'
        - 'productionYear'
        - 'color'

    UpdateMotorcycle:
      type: object
      properties:
        lisencePlate:
          type: string
        name:
          type: string
        brand:
          type: string
        type:
          type: string
        cylinderCapacity:
          type: number
        productionYear:
          type: string
        color:
          type: string
      example:
        name: 'NMax'
        cylinderCapacity: 155

    Service:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        motorcycleId:
          type: integer
        type:
          type: integer
        request:
          type: string
        serviceTime:
          type: string
        status:
          type: integer
        createdAt:
          type: string
      required:
        - 'id'
        - 'userId'
        - 'motorcycleId'
        - 'type'
        - 'request'
        - 'serviceTime'
        - 'status'
        - 'createdAt'

  examples:
    GetMotorcycles:
      value:
        status: 'success'
        message: 'Successfully found all motorcycles'
        motorcycles:
          - id: 1
            userId: 1
            lisencePlate: 'A 123 BC'
            name: 'Lexi'
            brand: 'Yamaha'
            type: 'Matic'
            cylinderCapacity: 125
            productionYear: '2019'
            color: 'Black'

          - id: 2
            userId: 1
            lisencePlate: 'X 45 YZ'
            name: 'R15'
            brand: 'Yamaha'
            type: 'Sport Manual'
            cylinderCapacity: 155
            productionYear: '2018'
            color: 'Blue'


    GetServices:
      value:
        status: 'success'
        message: 'Successfully found all services'
        services:
          - id: 1
            userId: 1
            motorcycleId: 1
            type: 1
            request: 'Please repair the handlebar'
            serviceTime: '2022-07-22 12:12:00'
            status: 1
            createdAt: '2022-06-09 13:00:00'

          - id: 2
            userId: 2
            motorcycleId: 1
            type: 2
            request: 'Please repair the handlebar'
            serviceTime: '2022-07-22 12:12:00'
            status: 1
            createdAt: '2022-06-09 13:00:00'



  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT authentication'

paths:
  /register:
    post:
      summary: 'Register a new account'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully registered a new account'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Account already exist':
                  value:
                    status: 'fail'
                    message: 'This account is already exist'
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'

  /login:
    post:
      summary: 'Login user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully login'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                "Account doesn't exist":
                  value:
                    status: 'fail'
                    message: "Account doesn''t exist"
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'

  /motorcycles/add:
    post:
      summary: 'Add a new motorcycle'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lisencePlate:
                  type: string
                name:
                  type: string
                brand:
                  type: string
                type:
                  type: integer
                cylinderCapacity:
                  type: number
                productionYear:
                  type: string
                color:
                  type: string
              required:
                - 'lisencePlate'
                - 'ownerName'
                - 'brand'
                - 'type'
                - 'cylinderCapacity'
                - 'productionYear'
                - 'color'
              example:
                lisencePlate: 'A 123 BC'
                name: 'Lexi'
                brand: 'Yamaha'
                type: 1
                cylinderCapacity: 155.99
                productionYear: '2019'
                color: 'Blue'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully added a new motorcycle'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'

  /services/add:
    post:
      summary: 'Add a new service'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motorcycleId:
                  type: integer
                type:
                  type: integer
                request:
                  type: string
                serviceTime:
                  type: string
                status:
                  type: integer
              required:
                - 'motorcycleId'
                - 'type'
                - 'request'
                - 'serviceTime'
                - 'status'
              example:
                motorcycleId: 1
                type: 1
                request: 'Please repair the handlebar'
                serviceTime: '2022-07-22 12:12:00'
                status: 1
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully added a new service'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'

  /motorcycles:
    get:
      summary: 'Get all motorcycles for user'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Motorcycle'
                        required:
                          - motorcycles
              examples:
                'Get all motorcycles':
                  $ref: '#/components/examples/GetMotorcycles'

  /services:
    get:
      summary: 'Get all services'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
                        required:
                          - services
              examples:
                'Get all services':
                    $ref: '#/components/examples/GetServices'

  /motorycles/update:
    put:
      summary: 'Update a motorcycle data'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMotorcycle'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully updated a motorcycle data'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'fail'
                message: 'Object or value is invalid'