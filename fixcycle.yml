openapi: '3.0.2'
info:
  title: fixcycle
  version: '1.0'
servers:
  - url: 'localhost:5000'

components:
  schemas:
    CommonResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - 'status'
        - 'message'

    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - 'email'
        - 'password'
        - 'accessToken'
      example:
        email: 'rikudou@gmail.com'
        password: 'Rikudou123'

    UserRegister:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
      required:
        - 'email'
        - 'password'
        - 'name'
        - 'phoneNumber'
        - 'address'
      example:
        email: 'rikudou@gmail.com'
        password: 'Rikudou123'
        name: 'Rikudou Sennin'
        phoneNumber: '08123456789'
        address: 'Konoha, Leaf Village'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        phone_number:
          type: string
        address:
          type: string
        is_admin:
          type: boolean
      required:
        - 'id'
        - 'email'
        - 'name'
        - 'phone_number'
        - 'address'
        - 'is_admin'

    UpdateUser:
      type: object
      properties:
        name:
          type: string
        phone_number:
          type: string
        address:
          type: string
      example:
        name: 'Xingqiu'
        phone_number: '089278162354'
        address: 'Liyue'

    Motorcycle:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        lisencePlate:
          type: string
        name:
          type: string
        brand:
          type: string
        type:
          type: string
        cylinderCapacity:
          type: number
        productionYear:
          type: string
        color:
          type: string
      required:
        - 'id'
        - 'userId'
        - 'lisencePlate'
        - 'name'
        - 'brand'
        - 'type'
        - 'cylinderCapacity'
        - 'productionYear'
        - 'color'

    UpdateMotorcycle:
      type: object
      properties:
        lisencePlate:
          type: string
        name:
          type: string
        brand:
          type: string
        type:
          type: string
        cylinderCapacity:
          type: number
        productionYear:
          type: string
        color:
          type: string
      example:
        name: 'NMax'
        cylinderCapacity: 155

    Service:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        motorcycleId:
          type: integer
        type:
          type: integer
        request:
          type: string
        serviceTime:
          type: string
        status:
          type: integer
        createdAt:
          type: string
      required:
        - 'id'
        - 'userId'
        - 'motorcycleId'
        - 'type'
        - 'request'
        - 'serviceTime'
        - 'status'
        - 'createdAt'

    ServiceUser:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        motorcycleId:
          type: integer
        type:
          type: integer
        request:
          type: string
        serviceTime:
          type: string
        status:
          type: integer
        createdAt:
          type: string
      required:
      - 'id'
      - 'userId'
      - 'motorcycleId'
      - 'type'
      - 'request'
      - 'serviceTime'
      - 'status'
      - 'createdAt'

  examples:
    GetUsers:
      value:
        status: 'success'
        message: 'Successfully get user profile'
        data:
          user:
            id: 1
            email: 'YelanxKazuha@gmail.com'
            name: 'Yelan'
            phone_number: '087831764545'
            address: 'Liyue'
            is_admin: false

    GetMotorcycles:
      value:
        status: 'success'
        message: 'Successfully found all motorcycles'
        data:
          motorcycles:
            - id: 1
              userId: 1
              lisencePlate: 'A 123 BC'
              name: 'Lexi'
              brand: 'Yamaha'
              type: 'Matic'
              cylinderCapacity: 125
              productionYear: '2019'
              color: 'Black'

            - id: 2
              userId: 1
              lisencePlate: 'X 45 YZ'
              name: 'R15'
              brand: 'Yamaha'
              type: 'Sport Manual'
              cylinderCapacity: 155
              productionYear: '2018'
              color: 'Blue'

    GetServices:
      value:
        status: 'success'
        message: 'Successfully found all services'
        data:
          services:
            - id: 1
              userId: 1
              motorcycleId: 1
              type: 1
              request: 'Please repair the handlebar'
              serviceTime: '2022-07-22 12:12:00'
              status: 1
              createdAt: '2022-06-09 13:00:00'

            - id: 2
              userId: 2
              motorcycleId: 1
              type: 2
              request: 'Please repair the handlebar'
              serviceTime: '2022-07-22 12:12:00'
              status: 1
              createdAt: '2022-06-09 13:00:00'

    GetServicesForUser:
      value:
        status: 'success'
        message: 'Successfully found all services for user'
        data:
          services:
            - id: 1
              userId: 1
              motorcycleId: 1
              type: 1
              request: 'Please repair the stang'
              serviceTime: '2022-07-22 12:12:00'
              status: 1
              createdAt: '2022-06-09 13:00:00'

            - id: 2
              userId: 1
              motorcycleId: 2
              type: 2
              request: 'Please change the tire'
              serviceTime: '2022-07-22 12:12:00'
              status: 1
              createdAt: '2022-06-09 13:00:00'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT authentication'

  responses:
    ServerError:
      description: 'An error that was caused by the internal server'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
          example:
            status: 'fail'
            message: 'Unexpected server error'
    UnauthorizedError:
      description: "User doesn't have any account session"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonResponse'
          example:
            status: 'fail'
            message: 'Unauthorized error'

paths:
  /register:
    post:
      summary: 'Register a new account'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully registered a new account'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Account already exist':
                  value:
                    status: 'fail'
                    message: 'This account is already exist'
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'
        '500':
          $ref: '#/components/responses/ServerError'

  /login:
    post:
      summary: 'Login user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully login'
                data:
                  accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                "Account doesn't exist":
                  value:
                    status: 'fail'
                    message: "Account doesn''t exist"
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'
                'Incorrect password':
                  value:
                    status: 'fail'
                    message: 'Incorrect password'
        '500':
          $ref: '#/components/responses/ServerError'

  /motorcycles/add:
    post:
      summary: 'Add a new motorcycle'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lisencePlate:
                  type: string
                name:
                  type: string
                brand:
                  type: string
                type:
                  type: integer
                cylinderCapacity:
                  type: number
                productionYear:
                  type: string
                color:
                  type: string
              required:
                - 'lisencePlate'
                - 'ownerName'
                - 'brand'
                - 'type'
                - 'cylinderCapacity'
                - 'productionYear'
                - 'color'
              example:
                lisencePlate: 'A 123 BC'
                name: 'Lexi'
                brand: 'Yamaha'
                type: 1
                cylinderCapacity: 155.99
                productionYear: '2019'
                color: 'Blue'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully added a new motorcycle'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /services/add:
    post:
      summary: 'Add a new service'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                motorcycleId:
                  type: integer
                type:
                  type: integer
                request:
                  type: string
                serviceTime:
                  type: string
                status:
                  type: integer
              required:
                - 'motorcycleId'
                - 'type'
                - 'request'
                - 'serviceTime'
                - 'status'
              example:
                motorcycleId: 1
                type: 1
                request: 'Please repair the handlebar'
                serviceTime: '2022-07-22 12:12:00'
                status: 1
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully added a new service'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              examples:
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /users:
    get:
      summary: 'Get user profile'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: object
                        items:
                          $ref: '#/components/schemas/User'
                        required:
                          - users
              examples:
                'Get user profile':
                    $ref: '#/components/examples/GetUsers'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /motorcycles:
    get:
      summary: 'Get all motorcycles for user'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Motorcycle'
                        required:
                          - motorcycles
              examples:
                'Get all motorcycles':
                  $ref: '#/components/examples/GetMotorcycles'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /motorcycles/get/{motorcycleId}:
    get:
      summary: 'Get motorcycle by id'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: motorcycleId
          description: 'The motorcycle ID to be viewed'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  motorcycle:
                    $ref: '#/components/schemas/Motorcycle'
                required:
                  - 'status'
                  - 'message'
                  - 'motorcycle'
              example:
                status: 'success'
                message: 'Product found'
                data:
                  motorcycle:
                      id: 1
                      userId: 1
                      lisencePlate: 'A 123 BC'
                      name: 'Lexi'
                      brand: 'Yamaha'
                      type: 'Matic'
                      cylinderCapacity: 125
                      productionYear: '2019'
                      color: 'Black'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: 'Product not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'fail'
                message: 'Product not found'
        '500':
          $ref: '#/components/responses/ServerError'

  /services:
    get:
      summary: 'Get all services'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Service'
                        required:
                          - services
              examples:
                'Get all services':
                    $ref: '#/components/examples/GetServices'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /services/user:
    get:
      summary: 'Get service for users'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CommonResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ServiceUser'
                        required:
                          - services/user
              examples:
                'Get services For User':
                    $ref: '#/components/examples/GetServicesForUser'

  /users/update:
    put:
      summary: 'Update a user data'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully updated a user data'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'fail'
                message: 'Object or value is invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /motorycles/update/{motorcycleId}:
    put:
      summary: 'Update a motorcycle data'
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: motorcycleId
          description: 'The motorcycle ID to be viewed'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMotorcycle'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Successfully updated a motorcycle data'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'fail'
                message: 'Object or value is invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /logout:
    delete:
      summary: 'Logout from current account by using the JWT token'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
              example:
                status: 'success'
                message: 'Succesfully loged out'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'